View(df)
df %>% mutate(credit_score_ntile = weighted_ntile(credit_score, 5, weight = earned_premium, solo_levels = c(997))) %>% group_by(credit_score_ntile) %>% summarize(across(earned_premium,sum))
df %>% arrange(credit_score)
df %>% arrange(credit_score) %>% mutate(epsum = cumsum(earned_premium))
test2 = df %>% arrange(credit_score) %>% mutate(epsum = cumsum(earned_premium))
View(test2)
df %>% mutate(credit_score_ntile = weighted_ntile(credit_score, 5, weight = earned_premium, solo_levels = c(997))) %>% group_by(credit_score_ntile) %>% summarize(across(earned_premium,sum))
x = df$credit_score
weight = df$earned_premium
temp = data.frame(x, weight) %>%
filter(!(x %in% solo_levels) & !is.na(x)) %>%
arrange(x) %>%
mutate(weightsum = cumsum(weight))
solo_levels = c(997)
temp = data.frame(x, weight) %>%
filter(!(x %in% solo_levels) & !is.na(x)) %>%
arrange(x) %>%
mutate(weightsum = cumsum(weight))
View(temp)
bucket_cutoffs = c(1,round((1:n)*(nrow(temp) / n),0))
n = 5
bucket_cutoffs = c(1,round((1:n)*(nrow(temp) / n),0))
100000/5
weight_total = sum(temp$weight)
value_cutoffs = (1:n)*(weight_total / n)
weight_total
value_cutoffs
temp$x[temp$weightsum<=value_cutoffs]
temp$weightsum<=value_cutoffs[1]
ntile(temp$weightsum,5)
?lapply
value_cutoffs
lapply(value_cutoffs, function(x) temp[temp$weightsum<=x,'x'] %>% max())
sapply(value_cutoffs, function(x) temp[temp$weightsum<=x,'x'] %>% max())
weighted_ntile = function(x, n, weight = 1, solo_levels = NULL){
temp = data.frame(x, weight) %>%
filter(!(x %in% solo_levels) & !is.na(x)) %>%
arrange(x) %>%
mutate(weightsum = cumsum(weight))
weight_sums = temp$weightsum
weight_total = sum(temp$weight)
weight_cutoffs = (1:n)*(weight_total / n)
value_cutoffs = sapply(weight_cutoffs, function(x) temp[temp$weightsum<=x,'x'] %>% max())
max_value = nchar(max(x))
labels = sprintf("%s , %s",
paste0('(',formatC(head(value_cutoffs, -1), format = "f", big.mark = ",", digits = 0)),
paste0(formatC(tail(value_cutoffs, -1), format = "f", big.mark = ",", digits = 0),']'))
labels[1] = gsub('\\(','[',labels[1])
temp2 = cut(x, breaks = value_cutoffs, labels = labels, include.lowest = T, right = T, ordered_result = T)
solo_ind = x %in% solo_levels
out = if_else(solo_ind,
formatC(x, format = "f", big.mark = ",", digits = 0),
as.character(temp2)) %>%
factor(levels = c(levels(temp2), formatC(solo_levels, format = "f", big.mark = ",", digits = 0)))
return(out)
}
df = data.frame(earned_premium = rexp(1000, 0.01), credit_score = sample(c(rep(997,50),sample(300:850, size = 950, replace = TRUE, prob = 850:300))))
df %>% mutate(credit_score_ntile = weighted_ntile(credit_score, 5, weight = earned_premium, solo_levels = c(997))) %>% group_by(credit_score_ntile) %>% summarize(across(earned_premium,sum))
value_cutoffs
weighted_ntile = function(x, n, weight = 1, solo_levels = NULL){
temp = data.frame(x, weight) %>%
filter(!(x %in% solo_levels) & !is.na(x)) %>%
arrange(x) %>%
mutate(weightsum = cumsum(weight))
weight_sums = temp$weightsum
weight_total = sum(temp$weight)
weight_cutoffs = (1:n)*(weight_total / n)
value_cutoffs = c(0,sapply(weight_cutoffs, function(x) temp[temp$weightsum<=x,'x'] %>% max()))
max_value = nchar(max(x))
labels = sprintf("%s , %s",
paste0('(',formatC(head(value_cutoffs, -1), format = "f", big.mark = ",", digits = 0)),
paste0(formatC(tail(value_cutoffs, -1), format = "f", big.mark = ",", digits = 0),']'))
labels[1] = gsub('\\(','[',labels[1])
temp2 = cut(x, breaks = value_cutoffs, labels = labels, include.lowest = T, right = T, ordered_result = T)
solo_ind = x %in% solo_levels
out = if_else(solo_ind,
formatC(x, format = "f", big.mark = ",", digits = 0),
as.character(temp2)) %>%
factor(levels = c(levels(temp2), formatC(solo_levels, format = "f", big.mark = ",", digits = 0)))
return(out)
}
df %>% mutate(credit_score_ntile = weighted_ntile(credit_score, 5, weight = earned_premium, solo_levels = c(997))) %>% group_by(credit_score_ntile) %>% summarize(across(earned_premium,sum))
weighted_ntile = function(x, n, weight = 1, solo_levels = NULL){
temp = data.frame(x, weight) %>%
filter(!(x %in% solo_levels) & !is.na(x)) %>%
arrange(x) %>%
mutate(weightsum = cumsum(weight))
weight_sums = temp$weightsum
weight_total = sum(temp$weight)
weight_cutoffs = (1:n)*(weight_total / n)
value_cutoffs = c(min(x),sapply(weight_cutoffs, function(x) temp[temp$weightsum<=x,'x'] %>% max()))
max_value = nchar(max(x))
labels = sprintf("%s , %s",
paste0('(',formatC(head(value_cutoffs, -1), format = "f", big.mark = ",", digits = 0)),
paste0(formatC(tail(value_cutoffs, -1), format = "f", big.mark = ",", digits = 0),']'))
labels[1] = gsub('\\(','[',labels[1])
temp2 = cut(x, breaks = value_cutoffs, labels = labels, include.lowest = T, right = T, ordered_result = T)
solo_ind = x %in% solo_levels
out = if_else(solo_ind,
formatC(x, format = "f", big.mark = ",", digits = 0),
as.character(temp2)) %>%
factor(levels = c(levels(temp2), formatC(solo_levels, format = "f", big.mark = ",", digits = 0)))
return(out)
}
df %>% mutate(credit_score_ntile = weighted_ntile(credit_score, 5, weight = earned_premium, solo_levels = c(997))) %>% group_by(credit_score_ntile) %>% summarize(across(earned_premium,sum))
temp = data.frame(x, weight) %>%
filter(!(x %in% solo_levels) & !is.na(x)) %>%
arrange(x) %>%
group_by(x) %>
temp = data.frame(x, weight) %>%
filter(!(x %in% solo_levels) & !is.na(x)) %>%
arrange(x) %>%
group_by(x) %>%
summarize(weightsum = cumsum(weight))
View(temp)
temp = data.frame(x, weight) %>%
filter(!(x %in% solo_levels) & !is.na(x)) %>%
arrange(x) %>%
group_by(x) %>%
summarize(weightsum = sum(weight)) %>%
mutate(weightsum = cumsum(weightsum))
weighted_ntile = function(x, n, weight = 1, solo_levels = NULL){
temp = data.frame(x, weight) %>%
filter(!(x %in% solo_levels) & !is.na(x)) %>%
arrange(x) %>%
group_by(x) %>%
summarize(weightsum = sum(weight)) %>%
mutate(weightsum = cumsum(weightsum))
weight_sums = temp$weightsum
weight_total = sum(temp$weight)
weight_cutoffs = (1:n)*(weight_total / n)
value_cutoffs = c(min(x),sapply(weight_cutoffs, function(x) temp[temp$weightsum<=x,'x'] %>% max()))
max_value = nchar(max(x))
labels = sprintf("%s , %s",
paste0('(',formatC(head(value_cutoffs, -1), format = "f", big.mark = ",", digits = 0)),
paste0(formatC(tail(value_cutoffs, -1), format = "f", big.mark = ",", digits = 0),']'))
labels[1] = gsub('\\(','[',labels[1])
temp2 = cut(x, breaks = value_cutoffs, labels = labels, include.lowest = T, right = T, ordered_result = T)
solo_ind = x %in% solo_levels
out = if_else(solo_ind,
formatC(x, format = "f", big.mark = ",", digits = 0),
as.character(temp2)) %>%
factor(levels = c(levels(temp2), formatC(solo_levels, format = "f", big.mark = ",", digits = 0)))
return(out)
}
df %>% mutate(credit_score_ntile = weighted_ntile(credit_score, 5, weight = earned_premium, solo_levels = c(997))) %>% group_by(credit_score_ntile) %>% summarize(across(earned_premium,sum))
weight_sums = temp$weightsum
weight_sums
weight_cutoffs = (1:n)*(weight_total / n)
weight_cutoffs
value_cutoffs = c(min(x),sapply(weight_cutoffs, function(x) temp[temp$weightsum<=x,'x'] %>% max()))
value_cutoffs
labels = sprintf("%s , %s",
paste0('(',formatC(head(value_cutoffs, -1), format = "f", big.mark = ",", digits = 0)),
paste0(formatC(tail(value_cutoffs, -1), format = "f", big.mark = ",", digits = 0),']'))
labels
labels[1] = gsub('\\(','[',labels[1])
labels[1]
temp2 = cut(x, breaks = value_cutoffs, labels = labels, include.lowest = T, right = T, ordered_result = T)
temp2
out = if_else(solo_ind,
formatC(x, format = "f", big.mark = ",", digits = 0),
as.character(temp2))
solo_ind = x %in% solo_levels
out = if_else(solo_ind,
formatC(x, format = "f", big.mark = ",", digits = 0),
as.character(temp2))
out
out = if_else(solo_ind,
formatC(x, format = "f", big.mark = ",", digits = 0),
as.character(temp2)) %>%
factor(levels = c(levels(temp2), formatC(solo_levels, format = "f", big.mark = ",", digits = 0)))
out
weighted_ntile = function(x, n, weight = 1, solo_levels = NULL){
temp = data.frame(x, weight) %>%
filter(!(x %in% solo_levels) & !is.na(x)) %>%
arrange(x) %>%
group_by(x) %>%
summarize(weightsum = sum(weight)) %>%
mutate(weightsum = cumsum(weightsum))
weight_total = sum(temp$weight)
weight_cutoffs = (1:n)*(weight_total / n)
value_cutoffs = c(min(x),sapply(weight_cutoffs, function(x) temp[temp$weightsum<=x,'x'] %>% max()))
max_value = nchar(max(x))
labels = sprintf("%s , %s",
paste0('(',formatC(head(value_cutoffs, -1), format = "f", big.mark = ",", digits = 0)),
paste0(formatC(tail(value_cutoffs, -1), format = "f", big.mark = ",", digits = 0),']'))
labels[1] = gsub('\\(','[',labels[1])
temp2 = cut(x, breaks = value_cutoffs, labels = labels, include.lowest = T, right = T, ordered_result = T)
solo_ind = x %in% solo_levels
out = if_else(solo_ind,
formatC(x, format = "f", big.mark = ",", digits = 0),
as.character(temp2)) %>%
factor(levels = c(levels(temp2), formatC(solo_levels, format = "f", big.mark = ",", digits = 0)))
return(out)
}
df = data.frame(earned_premium = rexp(1000, 0.01), credit_score = sample(c(rep(997,50),sample(300:850, size = 950, replace = TRUE, prob = 850:300))))
df
df %>% mutate(credit_score_ntile = weighted_ntile(credit_score, 5, weight = earned_premium, solo_levels = c(997))) %>% group_by(credit_score_ntile) %>% summarize(across(earned_premium,sum))
x = df$credit_score
weight = df$earned_premium
temp = data.frame(x, weight) %>%
filter(!(x %in% solo_levels) & !is.na(x)) %>%
arrange(x) %>%
group_by(x) %>%
summarize(weightsum = sum(weight)) %>%
mutate(weightsum = cumsum(weightsum))
temp
weight_total = sum(temp$weight)
weight_cutoffs = (1:n)*(weight_total / n)
value_cutoffs = c(min(x),sapply(weight_cutoffs, function(x) temp[temp$weightsum<=x,'x'] %>% max()))
weight_cutoffs
temp
weighted_ntile = function(x, n, weight = 1, solo_levels = NULL){
temp = data.frame(x, weight) %>%
filter(!(x %in% solo_levels) & !is.na(x)) %>%
arrange(x) %>%
group_by(x) %>%
summarize(weight = sum(weight)) %>%
mutate(weightsum = cumsum(weightsum))
weight_total = sum(temp$weight)
weight_cutoffs = (1:n)*(weight_total / n)
value_cutoffs = c(min(x),sapply(weight_cutoffs, function(x) temp[temp$weightsum<=x,'x'] %>% max()))
max_value = nchar(max(x))
labels = sprintf("%s , %s",
paste0('(',formatC(head(value_cutoffs, -1), format = "f", big.mark = ",", digits = 0)),
paste0(formatC(tail(value_cutoffs, -1), format = "f", big.mark = ",", digits = 0),']'))
labels[1] = gsub('\\(','[',labels[1])
temp2 = cut(x, breaks = value_cutoffs, labels = labels, include.lowest = T, right = T, ordered_result = T)
solo_ind = x %in% solo_levels
out = if_else(solo_ind,
formatC(x, format = "f", big.mark = ",", digits = 0),
as.character(temp2)) %>%
factor(levels = c(levels(temp2), formatC(solo_levels, format = "f", big.mark = ",", digits = 0)))
return(out)
}
df %>% mutate(credit_score_ntile = weighted_ntile(credit_score, 5, weight = earned_premium, solo_levels = c(997))) %>% group_by(credit_score_ntile) %>% summarize(across(earned_premium,sum))
weighted_ntile = function(x, n, weight = 1, solo_levels = NULL){
temp = data.frame(x, weight) %>%
filter(!(x %in% solo_levels) & !is.na(x)) %>%
arrange(x) %>%
group_by(x) %>%
summarize(weight = sum(weight)) %>%
mutate(weightsum = cumsum(weight))
weight_total = sum(temp$weight)
weight_cutoffs = (1:n)*(weight_total / n)
value_cutoffs = c(min(x),sapply(weight_cutoffs, function(x) temp[temp$weightsum<=x,'x'] %>% max()))
max_value = nchar(max(x))
labels = sprintf("%s , %s",
paste0('(',formatC(head(value_cutoffs, -1), format = "f", big.mark = ",", digits = 0)),
paste0(formatC(tail(value_cutoffs, -1), format = "f", big.mark = ",", digits = 0),']'))
labels[1] = gsub('\\(','[',labels[1])
temp2 = cut(x, breaks = value_cutoffs, labels = labels, include.lowest = T, right = T, ordered_result = T)
solo_ind = x %in% solo_levels
out = if_else(solo_ind,
formatC(x, format = "f", big.mark = ",", digits = 0),
as.character(temp2)) %>%
factor(levels = c(levels(temp2), formatC(solo_levels, format = "f", big.mark = ",", digits = 0)))
return(out)
}
df %>% mutate(credit_score_ntile = weighted_ntile(credit_score, 5, weight = earned_premium, solo_levels = c(997))) %>% group_by(credit_score_ntile) %>% summarize(across(earned_premium,sum))
temp = data.frame(x, weight) %>%
filter(!(x %in% solo_levels) & !is.na(x)) %>%
arrange(x) %>%
group_by(x) %>%
summarize(weight = sum(weight)) %>%
mutate(weightsum = cumsum(weight))
?join_by
test = join_by(test1 == test2)
View(test)
test = join_by(test1 == test2, test3 <= test4)
test = join_by(overlaps(x_lower, x_upper, y_lower, y_upper, ..., bounds = "[]"))
test = join_by(overlaps(x_lower, x_upper, y_lower, y_upper, bounds = "[]"))
join_cond_1 = join_by(effective_date <= evaluation_period_end)
join_cond_2 = join_by(effective_date >= evaluation_period_start)
join_by_append = function(jb1,jb2){
new_join_length = length(jb2$x)
old_join_length = length(jb1$x)
jb_out = jb1
for(i in 1:new_join_length){
append_point = old_join_length + i
jb_out$x[append_point] = jb2$x[i]
jb_out$y[append_point] = jb2$y[i]
jb_out$condition[append_point] = jb2$condition[i]
jb_out$filter[append_point] = jb2$filter[i]
jb_out$exprs[append_point] = jb2$exprs[i]
}
return(jb_out)
}
join_cond_combined = join_by_append(join_cond_1, join_cond_2)
View(join_cond_combined)
script_directory = 'G:/Clients/Glacier Insurance/2024 Monitoring/2024-09/PA'
source(paste0(script_directory,'/','1_FilePathsParameters.r'))
#load offset tables
symbol1_offset = openxlsx::read.xlsx(rating_plan_path, sheet = 'Symbol1') %>%
pivot_longer(cols = -c(Coverage, SymbolChar1), names_to = 'EffectiveDate',names_transform = ~as.Date(as.numeric(.x),origin = '1899-12-30'), values_to = 'symbol1_offset') %>%
filter(EffectiveDate == max(EffectiveDate)) %>%
select(-EffectiveDate)
symbol2_offset = openxlsx::read.xlsx(rating_plan_path, sheet = 'Symbol2') %>%
pivot_longer(cols = -c(Coverage, SymbolChar2), names_to = 'EffectiveDate',names_transform = ~as.Date(as.numeric(.x),origin = '1899-12-30'), values_to = 'symbol2_offset') %>%
filter(EffectiveDate == max(EffectiveDate)) %>%
select(-EffectiveDate)
territory_offset = openxlsx::read.xlsx(rating_plan_path, sheet = 'Territory') %>%
pivot_longer(cols = -c(Coverage, ZipCode), names_to = 'EffectiveDate',names_transform = ~as.Date(as.numeric(.x),origin = '1899-12-30'), values_to = 'territory_offset') %>%
filter(EffectiveDate == max(EffectiveDate)) %>%
select(-EffectiveDate)
#load data
working_data = fread(data_path,
na.strings = c(getOption("datatable.na.strings","NA"),"NULL"),
encoding = 'Latin-1') #field I1LTYP contains Ø, read as Latin-1
#load model scores
model_scores = read.csv(model_scores_path)[,c(1,3,4,26)] %>%
mutate(Date = as.Date(Date, format = '%m/%d/%Y')) %>%
group_by(VIN,Model.Number) %>%
slice_max(Date) %>% ## some model numbers for the same VIN have multiple records
filter(row_number()==1) %>%
select(-Date) %>%
pivot_wider(names_from = Model.Number, values_from = Score)
#filters
out_data = working_data %>%
mutate(
CoverageCode = toupper(CoverageCode),
across(c(EffectiveDate,ExpirationDate), as.Date),
across(c(ISOScore,VehicleHistoryScore),as.numeric)) %>%
filter(
State %in% state_code,
CoverageCode %in% data_coverages,
if(filter_dates) EffectiveDate <= evaluation_period_end else TRUE,
if(filter_dates) EffectiveDate >= evaluation_period_start else TRUE,
EarnedPremium > 0,
EarnedExposure > 0,
IncurredLoss >= 0)
out_data %>% filter(territory_offset == 1)
territory_offset %>% filter(value == 1)
territory_offset$territory_offset
territory_offset %>% filter(territory_offset == 1)
out_data = out_data %>%
left_join(symbol1_offset) %>%
left_join(symbol2_offset) %>%
left_join(territory_offset) %>%
mutate(
across(contains('_offset'), ~if_else(is.na(.x), mean(.x), .x)),
offset_total = apply(across(contains('offset')),1, prod))
out_data = out_data %>%
select(-all_of(no_info_cols)) %>%
mutate(
Coverage = toupper(CoverageCode),
EffectiveYear = year(EffectiveDate),
VehicleAge = year(EffectiveDate) - ModelYear,
Symbol = case_when(
CoverageCode == 'BI' ~ RAPABISymbol,
CoverageCode == 'PD' ~ RAPAPDSymbol,
CoverageCode == 'MED' ~ RAPAPIPSymbol,
CoverageCode == 'COLL' ~ RAPACOLLSymbol,
CoverageCode == 'COMP' ~ RAPACOMPSymbol),
SymbolChar1 = substr(Symbol,1,1),
SymbolChar2 = substr(Symbol,2,2))
no_info_cols = c()
for(col in names(out_data)){
uniques = out_data %>% pull(col) %>% unique() %>% length()
if(uniques == 1) {
unique = out_data %>% pull(col) %>% .[1]
print(paste0(col,' All ', unique))
no_info_cols = c(no_info_cols, col)}
}
#create binned variables
out_data = out_data %>%
mutate(Tenure_bins = weighted_ntile(Tenure, weight = "EarnedExposure", 5),
DriverAge_bins = weighted_ntile(DriverAge, weight = "EarnedExposure", 5),
VehicleHistoryScore_bins = weighted_ntile(VehicleHistoryScore, weight = "EarnedExposure", 5))
weighted_ntile
out_data = out_data %>%
mutate(Tenure_bins = weighted_ntile(Tenure, weight = EarnedExposure, 5),
DriverAge_bins = weighted_ntile(DriverAge, weight = EarnedExposure, 5),
VehicleHistoryScore_bins = weighted_ntile(VehicleHistoryScore, weight = EarnedExposure, 5))
out_data = out_data %>%
select(-all_of(no_info_cols)) %>%
mutate(
Coverage = toupper(CoverageCode),
EffectiveYear = year(EffectiveDate),
VehicleAge = year(EffectiveDate) - ModelYear,
Symbol = case_when(
CoverageCode == 'BI' ~ RAPABISymbol,
CoverageCode == 'PD' ~ RAPAPDSymbol,
CoverageCode == 'MED' ~ RAPAPIPSymbol,
CoverageCode == 'COLL' ~ RAPACOLLSymbol,
CoverageCode == 'COMP' ~ RAPACOMPSymbol),
SymbolChar1 = substr(Symbol,1,1),
SymbolChar2 = substr(Symbol,2,2))
out_data = out_data %>%
left_join(symbol1_offset) %>%
left_join(symbol2_offset) %>%
left_join(territory_offset) %>%
mutate(
across(contains('_offset'), ~if_else(is.na(.x), mean(.x), .x)),
offset_total = apply(across(contains('offset')),1, prod))
out_data$territory_offset %>% min()
out_data$territory_offset
out_data$territory_offset %>% sum()
out_data %>% filter(is.na(territory_offset))
?mean
out_data = out_data %>%
left_join(symbol1_offset) %>%
left_join(symbol2_offset) %>%
left_join(territory_offset) %>%
group_by(Coverage) %>%
mutate(
across(contains('_offset'), ~if_else(is.na(.x), mean(.x, na.rm = TRUE), .x))) %>%
ungroup() %>%
mutate(
offset_total = apply(across(contains('offset')),1, prod))
out_data$territory_offset
out_data$territory_offset %>% sum()
out_data = out_data %>%
mutate(Tenure_bins = weighted_ntile(Tenure, weight = EarnedExposure, 5),
DriverAge_bins = weighted_ntile(DriverAge, weight = EarnedExposure, 5),
VehicleHistoryScore_bins = weighted_ntile(VehicleHistoryScore, weight = EarnedExposure, 5))
weighted_ntile
out_data = out_data %>%
mutate(Tenure_bins = weighted_ntile(Tenure, 5, weight = EarnedExposure),
DriverAge_bins = weighted_ntile(DriverAge,  5, weight = EarnedExposure),
VehicleHistoryScore_bins = weighted_ntile(VehicleHistoryScore, 5, weight = EarnedExposure))
x = out_data$DriverAge
weight = out_data$EarnedExposure
#' An ntile function that respects weighting of observations.  Useful when creating binned variables for predictive models that will use a vector of weights.  This ensures an equal number of observations will be in each bucket with respect to how the model is created.
#' @param x Numeric vector
#' @param n Number of ntiles
#' @param weight Numeric vector containing weights of each record.  Default 1.
#' @param solo_levels Character vector of individual levels of x which should be binned individually.  These are "special levels" within x such as 0, or levels that otherwise do not make sense to bin with other levels.
#' @return Ordered factor representing x binned into ntiles.  The number of ntiles is n plus the number of solo levels specified.  Levels are formatted as whole numbers.
#' @export
#' @examples
#' df = data.frame(earned_premium = rexp(1000, 0.01), credit_score = sample(c(rep(997,50),sample(300:850, size = 950, replace = TRUE, prob = 850:300))))
#' df %>% mutate(credit_score_ntile = weighted_ntile(credit_score, 5, weight = earned_premium, solo_levels = c(997))) %>% group_by(credit_score_ntile) %>% summarize(across(earned_premium,sum))
weighted_ntile = function(x, n, weight = 1, solo_levels = NULL){
temp = data.frame(x, weight) %>%
filter(!(x %in% solo_levels) & !is.na(x)) %>%
arrange(x) %>%
group_by(x) %>%
summarize(weight = sum(weight)) %>%
mutate(weightsum = cumsum(weight))
weight_total = sum(temp$weight)
weight_cutoffs = (1:n)*(weight_total / n)
value_cutoffs = c(min(x),sapply(weight_cutoffs, function(x) temp[temp$weightsum<=x,'x'] %>% max()))
max_value = nchar(max(x))
labels = sprintf("%s , %s",
paste0('(',formatC(head(value_cutoffs, -1), format = "f", big.mark = ",", digits = 0)),
paste0(formatC(tail(value_cutoffs, -1), format = "f", big.mark = ",", digits = 0),']'))
labels[1] = gsub('\\(','[',labels[1])
temp2 = cut(x, breaks = value_cutoffs, labels = labels, include.lowest = T, right = T, ordered_result = T)
solo_ind = x %in% solo_levels
out = if_else(solo_ind,
formatC(x, format = "f", big.mark = ",", digits = 0),
as.character(temp2)) %>%
factor(levels = c(levels(temp2), formatC(solo_levels, format = "f", big.mark = ",", digits = 0)))
return(out)
}
out_data = out_data %>%
mutate(Tenure_bins = weighted_ntile(Tenure, 5, weight = EarnedExposure),
DriverAge_bins = weighted_ntile(DriverAge,  5, weight = EarnedExposure),
VehicleHistoryScore_bins = weighted_ntile(VehicleHistoryScore, 5, weight = EarnedExposure))
n = 5
temp = data.frame(x, weight) %>%
filter(!(x %in% solo_levels) & !is.na(x)) %>%
arrange(x) %>%
group_by(x) %>%
summarize(weight = sum(weight)) %>%
mutate(weightsum = cumsum(weight))
View(temp)
weight_total = sum(temp$weight)
weight_cutoffs = (1:n)*(weight_total / n)
value_cutoffs = c(min(x),sapply(weight_cutoffs, function(x) temp[temp$weightsum<=x,'x'] %>% max()))
value_cutoffs
weight_total
weight_cutoffs = (1:n)*(weight_total / n)
weight_cutoffs
value_cutoffs = c(min(x),sapply(weight_cutof
value_cutoffs = c(min(x),sapply(weight_cutoffs, function(x) temp[temp$weightsum<=x,'x'] %>% max()))
value_cutoffs
min(x)
weighted_ntile = function(x, n, weight = 1, solo_levels = NULL){
temp = data.frame(x, weight) %>%
filter(!(x %in% solo_levels) & !is.na(x)) %>%
arrange(x) %>%
group_by(x) %>%
summarize(weight = sum(weight)) %>%
mutate(weightsum = cumsum(weight))
weight_total = sum(temp$weight)
weight_cutoffs = (1:n)*(weight_total / n)
value_cutoffs = c(min(x, na.rm = TRUE),sapply(weight_cutoffs, function(x) temp[temp$weightsum<=x,'x'] %>% max()))
max_value = nchar(max(x))
labels = sprintf("%s , %s",
paste0('(',formatC(head(value_cutoffs, -1), format = "f", big.mark = ",", digits = 0)),
paste0(formatC(tail(value_cutoffs, -1), format = "f", big.mark = ",", digits = 0),']'))
labels[1] = gsub('\\(','[',labels[1])
temp2 = cut(x, breaks = value_cutoffs, labels = labels, include.lowest = T, right = T, ordered_result = T)
solo_ind = x %in% solo_levels
out = if_else(solo_ind,
formatC(x, format = "f", big.mark = ",", digits = 0),
as.character(temp2)) %>%
factor(levels = c(levels(temp2), formatC(solo_levels, format = "f", big.mark = ",", digits = 0)))
return(out)
}
out_data = out_data %>%
mutate(Tenure_bins = weighted_ntile(Tenure, 5, weight = EarnedExposure),
DriverAge_bins = weighted_ntile(DriverAge,  5, weight = EarnedExposure),
VehicleHistoryScore_bins = weighted_ntile(VehicleHistoryScore, 5, weight = EarnedExposure))
out_data$Tenure_bins
?load_all
getwd()
setwd('treedr')
getwd()
